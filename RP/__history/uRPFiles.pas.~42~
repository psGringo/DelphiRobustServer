unit uRPFiles;

interface

uses
  System.SysUtils, System.Classes, IdCustomHTTPServer, superobject, uCommon, uDB,
  uRP, IdContext, System.NetEncoding, uAttributes, System.JSON;

type
  TRPFiles = class(TRP)
    constructor Create(aContext: TIdContext; aRequestInfo: TIdHTTPRequestInfo;
      aResponseInfo: TIdHTTPResponseInfo); overload; override;
    constructor Create(aContext: TIdContext; aRequestInfo: TIdHTTPRequestInfo;
      aResponseInfo: TIdHTTPResponseInfo; NoExecute: Boolean); overload; override;
    procedure Upload();
    procedure Download();
  end;

implementation

uses
  uDecodePostRequest, System.IOUtils, Vcl.Forms;

{ TRPFiles }

constructor TRPFiles.Create(aContext: TIdContext; aRequestInfo:
  TIdHTTPRequestInfo; aResponseInfo: TIdHTTPResponseInfo);

  function IsMultipartRequest(): Boolean;
  begin
    Result := (Pos('multipart/form-data', LowerCase(aRequestInfo.ContentType)) > 0) and (Pos('boundary',
      LowerCase(aRequestInfo.ContentType)) > 0) and aRequestInfo.URI := '/Files/Upload';
  end;

begin
  inherited;
  if not IsMultipartRequest() then // Multipart
    Execute('Files');
end;

constructor TRPFiles.Create(aContext: TIdContext; aRequestInfo:
  TIdHTTPRequestInfo; aResponseInfo: TIdHTTPResponseInfo; NoExecute: Boolean);
begin
  inherited;
end;

procedure TRPFiles.Download;
var
  filepath: string;
begin
  filepath := ExtractFileDir(Application.ExeName) + StringReplace(RequestInfo.URI,
    '/', '\', [rfReplaceAll]);
  if TFile.Exists(filepath) then
  begin
    ResponseInfo.ServeFile(Context, filepath);
    FResponses.OK();
  end;
end;

procedure TRPFiles.Upload;
var
  d: ISP<TDecodePostRequest>;
  json: ISuperobject;
begin
  d := TSP<TDecodePostRequest>.Create();
  d.Execute(Context, RequestInfo, ResponseInfo);
  json := SO;
  json.S['relWebFilePath'] := d.RelWebFileDir;
  FResponses.OkWithJson(json.AsJSon(false, false));
end;

end.

