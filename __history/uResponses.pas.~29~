unit uResponses;

interface

uses
  System.SysUtils, System.Classes, IdCustomHTTPServer, superobject;

type
  IResponses = interface
    ['{CF59B6D2-D745-469D-8E16-E8EC501A6024}']
    procedure OK(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure Error(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo; EMessage: string = ''; ACodeNumber: integer = -1);
    procedure ResponseOkWithJson(AResponseInfo: TIdHTTPResponseInfo; aJsonData: string);
    procedure ResponseSuccessfullInsert(AResponseInfo: TIdHTTPResponseInfo; aId: integer);
  end;

  TResponses = class(TInterfacedObject, IResponses)
  private
    FAResponseInfo: TIdHTTPResponseInfo;
    FARequestInfo: TIdHTTPRequestInfo;
    procedure SetARequestInfo(const Value: TIdHTTPRequestInfo);
    procedure SetAResponseInfo(const Value: TIdHTTPResponseInfo);
  published
    constructor Create(aRequestInfo:TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo );
    procedure OK(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure Error(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo; EMessage: string = ''; ACodeNumber: integer = -1);
    procedure ResponseOkWithJson(AResponseInfo: TIdHTTPResponseInfo; aJsonData: string);
    procedure ResponseSuccessfullInsert(AResponseInfo: TIdHTTPResponseInfo; aId: integer);
    property ARequestInfo: TIdHTTPRequestInfo read FARequestInfo write SetARequestInfo;
    property AResponseInfo: TIdHTTPResponseInfo read FAResponseInfo write SetAResponseInfo;
  end;

implementation

{ TResponses }

constructor TResponses.Create(aRequestInfo:TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo );
begin
FAResponseInfo :=

end;

procedure TResponses.Error(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo; EMessage: string = ''; ACodeNumber: integer = -1);
var
  json: ISuperObject;
begin
  json := SO;
  json.S['answer'] := 'not ok';
  json.S['errorCode'] := ACodeNumber.ToString();
  json.S['errorMessage'] := EMessage;
  json.S['uri'] := ARequestInfo.URI;
  AResponseInfo.ResponseNo := 200;
  AResponseInfo.ContentType := 'application/json';
  AResponseInfo.CacheControl := 'no-cache';
  AResponseInfo.CustomHeaders.Add('Access-Control-Allow-Origin: *');
  AResponseInfo.ContentText := json.AsJSon(false, false);
  AResponseInfo.WriteContent;
end;

procedure TResponses.OK(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
var
  json: ISuperObject;
begin
  json := SO;
  json.S['answer'] := 'ok';
  json.S['uri'] := ARequestInfo.URI;
  AResponseInfo.ResponseNo := 200;
  AResponseInfo.ContentType := 'application/json';
  AResponseInfo.CacheControl := 'no-cache';
  AResponseInfo.CustomHeaders.Add('Access-Control-Allow-Origin: *');
  AResponseInfo.ContentText := json.AsJSon(false, false);
  AResponseInfo.WriteContent;
end;

procedure TResponses.ResponseOkWithJson(AResponseInfo: TIdHTTPResponseInfo; aJsonData: string);
begin

end;

procedure TResponses.ResponseSuccessfullInsert(AResponseInfo: TIdHTTPResponseInfo; aId: integer);
begin

end;

procedure TResponses.SetARequestInfo(const Value: TIdHTTPRequestInfo);
begin
  FARequestInfo := Value;
end;

procedure TResponses.SetAResponseInfo(const Value: TIdHTTPResponseInfo);
begin
  FAResponseInfo := Value;
end;

end.

