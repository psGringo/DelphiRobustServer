unit uCommon;

interface

uses
  LDSLogger, uConst, System.SysUtils, System.Classes, IdCustomHTTPServer,
  superobject, uResponses;

type
  ILogger = interface(IUnknown)
    ['{CE79C197-CB93-4576-9590-6FA2ED197652}']
    procedure LogError(aMsg: string);
  end;

  TLogger = class(TInterfacedObject, ILogger)
    procedure LogError(aMsg: string);
  end;

  TRP = class
  private
    FResponses: IResponses;
    FAResponseInfo: TIdHTTPResponseInfo;
    FARequestInfo: TIdHTTPRequestInfo;
    procedure SetARequestInfo(const Value: TIdHTTPRequestInfo);
    procedure SetAResponseInfo(const Value: TIdHTTPResponseInfo);
  public
    constructor Create(AOwner: TComponent); virtual;
    property ARequestInfo: TIdHTTPRequestInfo read FARequestInfo write SetARequestInfo;
    property AResponseInfo: TIdHTTPResponseInfo read FAResponseInfo write SetAResponseInfo;
  end;

implementation

{ TLDSLoggerImpl }

procedure TLogger.LogError(aMsg: string);
var
  l: TLDSLogger;
begin
  l := TLDSLogger.Create(logFileName);
  try
    l.LogStr(aMsg, tlpError);
  finally
    l.Free;
  end;
end;

{ TRP }

constructor TRP.Create(AOwner: TComponent);
begin
  FResponses := TResponses.Create(aRequestInfo, aResponseInfo);
  FAResponseInfo := aResponseInfo;
  FARequestInfo := aRequestInfo;
end;

procedure TRP.SetARequestInfo(const Value: TIdHTTPRequestInfo);
begin
  FARequestInfo := Value;
end;

procedure TRP.SetAResponseInfo(const Value: TIdHTTPResponseInfo);
begin
  FAResponseInfo := Value;
end;

end.

